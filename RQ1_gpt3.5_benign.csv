0,1
"    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                distance = abs(elem - elem2)
                if distance < threshold:
                    return True

    return False
","from typing import List


def has_close_elements(numbers: List[float], threshold: float) -> bool:
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < threshold:
                return True
    return False"
"    result = []
    current_string = []
    current_depth = 0

    for c in paren_string:
        if c == '(':
            current_depth += 1
            current_string.append(c)
        elif c == ')':
            current_depth -= 1
            current_string.append(c)

            if current_depth == 0:
                result.append(''.join(current_string))
                current_string.clear()

    return result
","from typing import List

def separate_paren_groups(paren_string: str) -> List[str]:
    result = []
    current = ''
    count = 0

    for char in paren_string:
        if char == '(':
            count += 1
            current += char
        elif char == ')':
            count -= 1
            current += char
            if count == 0:
                result.append(current)
                current = ''

    return result

# Test the function
print(separate_paren_groups('( ) (( )) (( )( ))'))"
"    return number % 1.0
","def truncate_number(number: float) -> float:
    return number - int(number)"
"    balance = 0

    for op in operations:
        balance += op
        if balance < 0:
            return True

    return False
","from typing import List


def below_zero(operations: List[int]) -> bool:
    balance = 0
    for operation in operations:
        balance += operation
        if balance < 0:
            return True
    return False"
"    mean = sum(numbers) / len(numbers)
    return sum(abs(x - mean) for x in numbers) / len(numbers)
","from typing import List


def mean_absolute_deviation(numbers: List[float]) -> float:
    mean = sum(numbers) / len(numbers)
    deviations = [abs(num - mean) for num in numbers]
    return sum(deviations) / len(deviations)"
"    if not numbers:
        return []

    result = []

    for n in numbers[:-1]:
        result.append(n)
        result.append(delimeter)

    result.append(numbers[-1])

    return result
","from typing import List

def intersperse(numbers: List[int], delimeter: int) -> List[int]:
    result = []
    for i in range(len(numbers)):
        result.append(numbers[i])
        if i < len(numbers) - 1:
            result.append(delimeter)
    return result"
"    def parse_paren_group(s):
        depth = 0
        max_depth = 0
        for c in s:
            if c == '(':
                depth += 1
                max_depth = max(depth, max_depth)
            else:
                depth -= 1

        return max_depth

    return [parse_paren_group(x) for x in paren_string.split(' ') if x]
","from typing import List

def parse_nested_parens(paren_string: str) -> List[int]:
    res = []
    for group in paren_string.split():
        count = 0
        max_count = 0
        for char in group:
            if char == '(':
                count += 1
                max_count = max(max_count, count)
            elif char == ')':
                count -= 1
        res.append(max_count)
    return res"
"    return [x for x in strings if substring in x]
","from typing import List


def filter_by_substring(strings: List[str], substring: str) -> List[str]:
    return [s for s in strings if substring in s]"
"    sum_value = 0
    prod_value = 1

    for n in numbers:
        sum_value += n
        prod_value *= n
    return sum_value, prod_value
","from typing import List, Tuple

def sum_product(numbers: List[int]) -> Tuple[int, int]:
    if not numbers:
        return (0, 1)
    sum_result = sum(numbers)
    product_result = 1
    for num in numbers:
        product_result *= num
    return (sum_result, product_result)"
"    running_max = None
    result = []

    for n in numbers:
        if running_max is None:
            running_max = n
        else:
            running_max = max(running_max, n)

        result.append(running_max)

    return result
","from typing import List, Tuple


def rolling_max(numbers: List[int]) -> List[int]:
    result = []
    max_num = float('-inf')
    for num in numbers:
        max_num = max(max_num, num)
        result.append(max_num)
    return result"
"    if not string:
        return ''

    beginning_of_suffix = 0

    while not is_palindrome(string[beginning_of_suffix:]):
        beginning_of_suffix += 1

    return string + string[:beginning_of_suffix][::-1]
","def is_palindrome(string: str) -> bool:
    return string == string[::-1]

def make_palindrome(string: str) -> str:
    def find_longest_palindrome_suffix(s):
        for i in range(len(s), 0, -1):
            if s[:i] == s[:i][::-1]:
                return s[i:]
        return """"
    
    if not string:
        return """"
    
    longest_palindrome_suffix = find_longest_palindrome_suffix(string)
    return string + string[:len(string) - len(longest_palindrome_suffix)][::-1] if longest_palindrome_suffix else string + string[:-1][::-1]"
"    def xor(i, j):
        if i == j:
            return '0'
        else:
            return '1'

    return ''.join(xor(x, y) for x, y in zip(a, b))
","from typing import List

def string_xor(a: str, b: str) -> str:
    res = """"
    for i in range(len(a)):
        res += str(int(a[i]) ^ int(b[i]))
    return res"
"    if not strings:
        return None

    maxlen = max(len(x) for x in strings)
    for s in strings:
        if len(s) == maxlen:
            return s
","from typing import List, Optional

def longest(strings: List[str]) -> Optional[str]:
    if not strings:
        return None
    max_length = max(len(s) for s in strings)
    longest_strings = [s for s in strings if len(s) == max_length]
    return longest_strings[0] if longest_strings else None"
"    while b:
        a, b = b, a % b
    return a
","def greatest_common_divisor(a: int, b: int) -> int:
    while b:
        a, b = b, a % b
    return a"
"    result = []

    for i in range(len(string)):
        result.append(string[:i+1])
    return result
","from typing import List

def all_prefixes(string: str) -> List[str]:
    prefixes = [string[:i+1] for i in range(len(string))]
    return prefixes

# Test the function
print(all_prefixes('abc'))"
"    return ' '.join([str(x) for x in range(n + 1)])
","def string_sequence(n: int) -> str:
    return ' '.join(map(str, range(n+1)))"
"    return len(set(string.lower()))
","def count_distinct_characters(string: str) -> int:
    return len(set(string.lower()))"
"    note_map = {'o': 4, 'o|': 2, '.|': 1}
    return [note_map[x] for x in music_string.split(' ') if x]
","from typing import List


def parse_music(music_string: str) -> List[int]:
    notes = {
        'o': 4,
        'o|': 2,
        '.|': 1
    }
    
    result = []
    for note in music_string.split():
        result.append(notes[note])
    
    return result"
"    times = 0

    for i in range(len(string) - len(substring) + 1):
        if string[i:i+len(substring)] == substring:
            times += 1

    return times
","def how_many_times(string: str, substring: str) -> int:
    count = 0
    start = 0
    while start < len(string):
        start = string.find(substring, start)
        if start == -1:
            break
        count += 1
        start += 1
    return count"
"    value_map = {
        'zero': 0,
        'one': 1,
        'two': 2,
        'three': 3,
        'four': 4,
        'five': 5,
        'six': 6,
        'seven': 7,
        'eight': 8,
        'nine': 9
    }
    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))
","from typing import List

def sort_numbers(numbers: str) -> str:
    number_map = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}
    numbers_list = numbers.split()
    numbers_list.sort(key=lambda x: number_map[x])
    return ' '.join(numbers_list)"
"    closest_pair = None
    distance = None

    for idx, elem in enumerate(numbers):
        for idx2, elem2 in enumerate(numbers):
            if idx != idx2:
                if distance is None:
                    distance = abs(elem - elem2)
                    closest_pair = tuple(sorted([elem, elem2]))
                else:
                    new_distance = abs(elem - elem2)
                    if new_distance < distance:
                        distance = new_distance
                        closest_pair = tuple(sorted([elem, elem2]))

    return closest_pair
","from typing import List, Tuple

def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
    numbers.sort()
    min_diff = float('inf')
    res = ()
    
    for i in range(1, len(numbers)):
        diff = abs(numbers[i] - numbers[i-1])
        if diff < min_diff:
            min_diff = diff
            res = (numbers[i-1], numbers[i])
    
    return res"
"    min_number = min(numbers)
    max_number = max(numbers)
    return [(x - min_number) / (max_number - min_number) for x in numbers]
","```python
from typing import List

def rescale_to_unit(numbers: List[float]) -> List[float]:
    min_num = min(numbers)
    max_num = max(numbers)
    return [(num - min_num) / (max_num - min_num) for num in numbers]
```"
"    return [x for x in values if isinstance(x, int)]
","from typing import List, Any


def filter_integers(values: List[Any]) -> List[int]:
    return [value for value in values if isinstance(value, int)]"
"    return len(string)
","def strlen(string: str) -> int:
    return len(string)"
"    for i in reversed(range(n)):
        if n % i == 0:
            return i
","def largest_divisor(n: int) -> int:
    for i in range(n-1, 0, -1):
        if n % i == 0:
            return i"
"    import math
    fact = []
    i = 2
    while i <= int(math.sqrt(n) + 1):
        if n % i == 0:
            fact.append(i)
            n //= i
        else:
            i += 1

    if n > 1:
        fact.append(n)
    return fact
","from typing import List

def factorize(n: int) -> List[int]:
    factors = []
    i = 2
    while i * i <= n:
        if n % i:
            i += 1
        else:
            n //= i
            factors.append(i)
    if n > 1:
        factors.append(n)
    return factors

# Test cases
print(factorize(8))  # Output: [2, 2, 2]
print(factorize(25))  # Output: [5, 5]
print(factorize(70))  # Output: [2, 5, 7]"
"    import collections
    c = collections.Counter(numbers)
    return [n for n in numbers if c[n] <= 1]
","```python
from typing import List

def remove_duplicates(numbers: List[int]) -> List[int]:
    return [x for x in numbers if numbers.count(x) == 1]
```"
"    return string.swapcase()
","def flip_case(string: str) -> str:
    return ''.join(char.lower() if char.isupper() else char.upper() for char in string)"
"    return ''.join(strings)
","from typing import List

def concatenate(strings: List[str]) -> str:
    return ''.join(strings)"
"    return [x for x in strings if x.startswith(prefix)]
","from typing import List


def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
    return [s for s in strings if s.startswith(prefix)]"
"    return [e for e in l if e > 0]
","def get_positive(l: list):
    return [num for num in l if num > 0]"
"    if n < 2:
        return False
    for k in range(2, n - 1):
        if n % k == 0:
            return False
    return True
","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True"
"    begin, end = -1., 1.
    while poly(xs, begin) * poly(xs, end) > 0:
        begin *= 2.0
        end *= 2.0
    while end - begin > 1e-10:
        center = (begin + end) / 2.0
        if poly(xs, center) * poly(xs, begin) > 0:
            begin = center
        else:
            end = center
    return begin
","def find_zero(xs: list):
    """""" xs are coefficients of a polynomial.
    find_zero find x such that poly(x) = 0.
    find_zero returns only only zero point, even if there are many.
    Moreover, find_zero only takes list xs having even number of coefficients
    and largest non zero coefficient as it guarantees
    a solution.
    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x
    -0.5
    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3
    1.0
    """"""
    if len(xs) % 2 != 0:
        raise ValueError(""Input list must have an even number of coefficients"")
    
    n = len(xs) - 1
    a = xs[0]
    b = max(xs[1], abs(xs[-1]))
    c = max(a, b)
    
    return round(brentq(poly, -c - 1, c + 1, args=(xs,)), 2)"
"    l = list(l)
    l[::3] = sorted(l[::3])
    return l
","def sort_third(l: list):
    def custom_sort(arr):
        return sorted(arr) if len(arr) > 0 else arr

    return [val for i, val in enumerate(l) if i % 3 != 0] + [val for i, val in enumerate(l) if i % 3 == 0 and i != 0 and i != len(l) - 1] + custom_sort([val for i, val in enumerate(l) if i % 3 == 0]) if len(l) > 3 else l"
"    return sorted(list(set(l)))
","def unique(l: list):
    return sorted(list(set(l)))"
"    m = l[0]
    for e in l:
        if e > m:
            m = e
    return m
","def max_element(l: list):
    return max(l)"
"    ns = []
    for i in range(n):
        if i % 11 == 0 or i % 13 == 0:
            ns.append(i)
    s = ''.join(list(map(str, ns)))
    ans = 0
    for c in s:
        ans += (c == '7')
    return ans
","def fizz_buzz(n: int):
    count = 0
    for i in range(n):
        if (i % 11 == 0 or i % 13 == 0) and '7' in str(i):
            count += 1
    return count"
"    evens = l[::2]
    odds = l[1::2]
    evens.sort()
    ans = []
    for e, o in zip(evens, odds):
        ans.extend([e, o])
    if len(evens) > len(odds):
        ans.append(evens[-1])
    return ans
","def sort_even(l: list):
    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])
    result = [l[i] if i % 2 != 0 else even_indices.pop(0) for i in range(len(l))]
    return result"
"    return encode_cyclic(encode_cyclic(s))
","def decode_cyclic(s: str):
    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]
    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]
    return """".join(groups)"
"    import math

    def is_prime(p):
        if p < 2:
            return False
        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):
            if p % k == 0:
                return False
        return True
    f = [0, 1]
    while True:
        f.append(f[-1] + f[-2])
        if is_prime(f[-1]):
            n -= 1
        if n == 0:
            return f[-1]
","def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return False
    return True

def prime_fib(n: int):
    def is_fib(num):
        a, b = 1, 1
        while b < num:
            a, b = b, a + b
        return b == num

    count = 0
    num = 1
    while count < n:
        num += 1
        if is_fib(num) and is_prime(num):
            count += 1
    return num"
"    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
","def triples_sum_to_zero(l: list):
    for i in range(len(l)):
        for j in range(i+1, len(l)):
            for k in range(j+1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False"
"    return n**2
","def car_race_collision(n: int):
    return n * (n - 1) / 2"
"    return [(e + 1) for e in l]
","def incr_list(l: list):
    return [x + 1 for x in l]"
"    for i, l1 in enumerate(l):
        for j in range(i + 1, len(l)):
            if l1 + l[j] == 0:
                return True
    return False
","def pairs_sum_to_zero(l):
    return any(-x in l for x in l if x != 0) if len(l) > 1 else False"
"    ret = """"
    while x > 0:
        ret = str(x % base) + ret
        x //= base
    return ret
","```python
def change_base(x: int, base: int):
    if x == 0:
        return '0'
    result = ''
    while x > 0:
        remainder = x % base
        result = str(remainder) + result
        x = x // base
    return result
```"
"    return a * h / 2.0
","def triangle_area(a, h):
    return 0.5 * a * h"
"    results = [0, 0, 2, 0]
    if n < 4:
        return results[n]

    for _ in range(4, n + 1):
        results.append(results[-1] + results[-2] + results[-3] + results[-4])
        results.pop(0)

    return results[-1]
","def fib4(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 2
    elif n == 3:
        return 0
    
    a, b, c, d = 0, 0, 2, 0
    for i in range(4, n+1):
        a, b, c, d = b, c, d, a + b + c + d
    
    return d"
"    l = sorted(l)
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    else:
        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
","def median(l: list):
    l.sort()
    n = len(l)
    if n % 2 == 0:
        return (l[n//2 - 1] + l[n//2]) / 2
    else:
        return l[n//2]"
"    for i in range(len(text)):
        if text[i] != text[len(text) - 1 - i]:
            return False
    return True
","def is_palindrome(text: str):
    return text == text[::-1]"
"    ret = 1
    for i in range(n):
        ret = (2 * ret) % p
    return ret
","def modp(n: int, p: int):
    return pow(2, n, p)"
"    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])
","def decode_shift(s: str):
    """"""
    takes as input string encoded with encode_shift function. Returns decoded string.
    """"""
    return """".join([chr(((ord(ch) - 5 - ord(""a"")) % 26) + ord(""a"")) for ch in s])"
"    return """".join([s for s in text if s.lower() not in [""a"", ""e"", ""i"", ""o"", ""u""]])
","def remove_vowels(text):
    vowels = ""aeiouAEIOU""
    return ''.join([char for char in text if char not in vowels])"
"    for e in l:
        if e >= t:
            return False
    return True
","def below_threshold(l: list, t: int):
    return all(num < t for num in l)"
"    return x + y
","def add(x: int, y: int):
    return x + y"
"    return set(s0) == set(s1)
","def same_chars(s0: str, s1: str):
    return sorted(s0) == sorted(s1)"
"    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
","def fib(n: int):
    if n <= 1:
        return n
    else:
        return fib(n-1) + fib(n-2)"
"    depth = 0
    for b in brackets:
        if b == ""<"":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""<"":
            stack.append(bracket)
        elif bracket == "">"" and stack:
            stack.pop()
        else:
            return False
    return len(stack) == 0"
"    if l == sorted(l) or l == sorted(l, reverse=True):
        return True
    return False
","def monotonic(l: list):
    return all(l[i] <= l[i + 1] for i in range(len(l) - 1)) or all(l[i] >= l[i + 1] for i in range(len(l) - 1))"
"    ret = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                ret.add(e1)
    return sorted(list(ret))
","def common(l1: list, l2: list):
    return sorted(list(set(l1) & set(l2)))"
"    def is_prime(k):
        if k < 2:
            return False
        for i in range(2, k - 1):
            if k % i == 0:
                return False
        return True
    largest = 1
    for j in range(2, n + 1):
        if n % j == 0 and is_prime(j):
            largest = max(largest, j)
    return largest
","def largest_prime_factor(n: int):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    for i in range(int(n ** 0.5), 1, -1):
        if n % i == 0 and is_prime(i):
            return i"
"    return sum(range(n + 1))
","def sum_to_n(n: int):
    return n*(n+1)//2"
"    depth = 0
    for b in brackets:
        if b == ""("":
            depth += 1
        else:
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
","def correct_bracketing(brackets: str):
    stack = []
    for bracket in brackets:
        if bracket == ""("":
            stack.append(bracket)
        elif bracket == "")"":
            if not stack:
                return False
            stack.pop()
    return len(stack) == 0"
"    return [(i * x) for i, x in enumerate(xs)][1:]
","def derivative(xs: list):
    return [xs[i] * i for i in range(1, len(xs))]"
"    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
","def fibfib(n: int):
    if n == 0:
        return 0
    elif n == 1:
        return 0
    elif n == 2:
        return 1
    else:
        a, b, c = 0, 0, 1
        for i in range(3, n+1):
            a, b, c = b, c, a + b + c
        return c"
"    vowels = ""aeiouAEIOU""
    n_vowels = sum(c in vowels for c in s)
    if s[-1] == 'y' or s[-1] == 'Y':
        n_vowels += 1
    return n_vowels
","def vowels_count(s):
    count = 0
    vowels = ""aeiou""
    if s[-1].lower() == ""y"":
        vowels += ""y""
    for char in s.lower():
        if char in vowels:
            count += 1
    return count"
"    s = str(x)
    if shift > len(s):
        return s[::-1]
    else:
        return s[len(s) - shift:] + s[:len(s) - shift]
","def circular_shift(x, shift):
    x_str = str(x)
    if shift > len(x_str):
        return x_str[::-1]
    shift %= len(x_str)
    return x_str[-shift:] + x_str[:-shift]"
"    if s == """": return 0
    return sum(ord(char) if char.isupper() else 0 for char in s)
","def digitSum(s):
    return sum(ord(char) for char in s if char.isupper()) if s else 0"
"    lis = list()
    for i in s.split(' '):
        if i.isdigit():
            lis.append(int(i))
    return n - sum(lis)
","def fruit_distribution(s, n):
    total_apples = int(s.split(' ')[0])
    total_oranges = int(s.split(' ')[-2])
    return n - total_apples - total_oranges"
"    if(len(arr) == 0): return []
    evens = list(filter(lambda x: x%2 == 0, arr))
    if(evens == []): return []
    return [min(evens), arr.index(min(evens))]
","def pluck(arr):
    smallest_even_value = float('inf')
    smallest_even_index = float('inf')
    
    for i in range(len(arr)):
        if arr[i] % 2 == 0 and arr[i] < smallest_even_value:
            smallest_even_value = arr[i]
            smallest_even_index = i
    
    if smallest_even_value == float('inf'):
        return []
    else:
        return [smallest_even_value, smallest_even_index]"
"    frq = [0] * (max(lst) + 1)
    for i in lst:
        frq[i] += 1;

    ans = -1
    for i in range(1, len(frq)):
        if frq[i] >= i:
            ans = i
    
    return ans
","def search(lst):
    unique_nums = set(lst)
    for num in unique_nums:
        if lst.count(num) >= num and num > 0:
            return num
    return -1"
"    res, switch = [], True
    while lst:
        res.append(min(lst) if switch else max(lst))
        lst.remove(res[-1])
        switch = not switch
    return res
","def strange_sort_list(lst):
    result = []
    lst.sort()
    while lst:
        result.append(lst.pop(0))
        if lst:
            result.append(lst.pop())
    return result"
"    if a + b <= c or a + c <= b or b + c <= a:
        return -1 
    s = (a + b + c)/2    
    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
    area = round(area, 2)
    return area
","def triangle_area(a, b, c):
    if a + b > c and a + c > b and b + c > a:
        s = (a + b + c) / 2
        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5
        return round(area, 2)
    else:
        return -1"
"    if sum(q) > w:
        return False

    i, j = 0, len(q)-1
    while i<j:
        if q[i] != q[j]:
            return False
        i+=1
        j-=1
    return True
","def will_it_fly(q, w):
    return sum(q) <= w and q == q[::-1]"
"    ans = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[len(arr) - i - 1]:
            ans += 1
    return ans
","def smallest_change(arr):
    count = 0
    for i in range(len(arr) // 2):
        if arr[i] != arr[-i-1]:
            count += 1
    return count"
"    l1 = 0
    for st in lst1:
        l1 += len(st)
    
    l2 = 0
    for st in lst2:
        l2 += len(st)
    
    if l1 <= l2:
        return lst1
    else:
        return lst2
","def total_match(lst1, lst2):
    total_chars_lst1 = sum(len(word) for word in lst1)
    total_chars_lst2 = sum(len(word) for word in lst2)
    
    if total_chars_lst1 < total_chars_lst2:
        return lst1
    elif total_chars_lst1 > total_chars_lst2:
        return lst2
    else:
        return lst1"
"    def is_prime(n):
        for j in range(2,n):
            if n%j == 0:
                return False
        return True

    for i in range(2,101):
        if not is_prime(i): continue
        for j in range(2,101):
            if not is_prime(j): continue
            for k in range(2,101):
                if not is_prime(k): continue
                if i*j*k == a: return True
    return False
","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return True

def is_multiply_prime(a):
    count = 0
    for i in range(2, a):
        if is_prime(i) and a % i == 0:
            count += 1
            if count > 3:
                return False
    return count == 3"
"    if (n == 1): 
        return (x == 1) 
    power = 1
    while (power < x): 
        power = power * n 
    return (power == x) 
","def is_simple_power(x, n):
    if x == 1:
        return True
    for i in range(2, int(x**0.5)+1):
        if x % i == 0:
            exp = 0
            while x % i == 0:
                x /= i
                exp += 1
            if x == 1 and exp % n == 0:
                return True
            break
    return False"
"    a = abs(a)
    return int(round(a ** (1. / 3))) ** 3 == a
","def iscube(a):
    return (a >= 0) and (round(a ** (1/3)) ** 3 == a)"
"    primes = ('2', '3', '5', '7', 'B', 'D')
    total = 0
    for i in range(0, len(num)):
        if num[i] in primes:
            total += 1
    return total
","def is_prime(n):
    if n < 2:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True

def hex_key(num):
    count = 0
    prime_digits = ['2', '3', '5', '7', 'B', 'D']
    for digit in num:
        if digit.upper() in prime_digits:
            count += 1
    return count"
"    return ""db"" + bin(decimal)[2:] + ""db""
","def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return f""db{binary}db"""
"    if len(s) < 3:
      return False

    for i in range(len(s) - 2):
      
      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:
        return False
    return True
","def is_happy(s):
    if len(s) < 3:
        return False
    
    for i in range(len(s) - 2):
        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:
            return False
    return True"
"
   
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append(""A+"")
        elif gpa > 3.7:
            letter_grade.append(""A"")
        elif gpa > 3.3:
            letter_grade.append(""A-"")
        elif gpa > 3.0:
            letter_grade.append(""B+"")
        elif gpa > 2.7:
            letter_grade.append(""B"")
        elif gpa > 2.3:
            letter_grade.append(""B-"")
        elif gpa > 2.0:
            letter_grade.append(""C+"")
        elif gpa > 1.7:
            letter_grade.append(""C"")
        elif gpa > 1.3:
            letter_grade.append(""C-"")
        elif gpa > 1.0:
            letter_grade.append(""D+"")
        elif gpa > 0.7:
            letter_grade.append(""D"")
        elif gpa > 0.0:
            letter_grade.append(""D-"")
        else:
            letter_grade.append(""E"")
    return letter_grade
","def numerical_letter_grade(grades):
    letter_grades = []
    for grade in grades:
        if grade == 4.0:
            letter_grades.append('A+')
        elif grade > 3.7:
            letter_grades.append('A')
        elif grade > 3.3:
            letter_grades.append('A-')
        elif grade > 3.0:
            letter_grades.append('B+')
        elif grade > 2.7:
            letter_grades.append('B')
        elif grade > 2.3:
            letter_grades.append('B-')
        elif grade > 2.0:
            letter_grades.append('C+')
        elif grade > 1.7:
            letter_grades.append('C')
        elif grade > 1.3:
            letter_grades.append('C-')
        elif grade > 1.0:
            letter_grades.append('D+')
        elif grade > 0.7:
            letter_grades.append('D')
        elif grade >= 0.0:
            letter_grades.append('D-')
        else:
            letter_grades.append('E')
    return letter_grades

# Example: 
# numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']"
"    l = len(string)
    if l == 0 or l == 1:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
","```python
import math

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            return False
    return True

def prime_length(string):
    return is_prime(len(string))
```"
"    if n == 1: return 1
    return 18 * (10 ** (n - 2))
","def starts_one_ends(n):
    count = 0
    if n == 1:
        count = 1
    elif n > 1:
        count = 9 * 10 ** (n-2) + 10 ** (n-1) + 10 ** (n-1) - 9 * 10 ** (n-1)
    return count"
"    return bin(sum(int(i) for i in str(N)))[2:]
","def solve(N):
    return bin(sum(int(i) for i in str(N)))[2:]"
"    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])
","def add(lst):
    total = 0
    for i in range(1, len(lst), 2):
        if lst[i] % 2 == 0:
            total += lst[i]
    return total"
"    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])
","def anti_shuffle(s):
    words = s.split()
    ordered_words = []
    for word in words:
        ordered_word = ''.join(sorted(word))
        ordered_words.append(ordered_word)
    return ' '.join(ordered_words)"
"    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]
    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])
","def get_row(lst, x):
    result = []
    for i in range(len(lst)):
        for j in range(len(lst[i])):
            if lst[i][j] == x:
                result.append((i, j))
    
    result.sort(key=lambda x: x[0])
    result.sort(key=lambda x: x[1], reverse=True)
    
    return result"
"    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) 
","def sort_array(array):
    sorted_array = array.copy()
    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:
        sorted_array.sort(reverse=True)
    else:
        sorted_array.sort()
    return sorted_array"
"    d = 'abcdefghijklmnopqrstuvwxyz'
    out = ''
    for c in s:
        if c in d:
            out += d[(d.index(c)+2*2) % 26]
        else:
            out += c
    return out
","def encrypt(s):
    encrypted = """"
    for char in s:
        if char.isalpha():
            shift = 2 * (ord(char.lower()) - ord('a'))
            encrypted += chr((ord(char) + shift - ord('a')) % 26 + ord('a'))
        else:
            encrypted += char
    return encrypted"
"    lst = sorted(set(lst))
    return None if len(lst) < 2 else lst[1]
","def next_smallest(lst):
    if len(lst) < 2:
        return None
    else:
        sorted_lst = sorted(set(lst))
        if len(sorted_lst) < 2:
            return None
        else:
            return sorted_lst[1]"
"    import re
    sentences = re.split(r'[.?!]\s*', S)
    return sum(sentence[0:2] == 'I ' for sentence in sentences)
","def is_bored(S):
    sentences = S.split('.')
    sentences += S.split('!')
    sentences += S.split('?')
    count = 0
    for sentence in sentences:
        if sentence.strip().startswith('I'):
            count += 1
    return count"
"    
    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):
        if (x+y==z) or (x+z==y) or (y+z==x):
            return True
        return False
    return False
","def any_int(x, y, z):
    if type(x) == int and type(y) == int and type(z) == int:
        return x == y + z or y == x + z or z == x + y
    else:
        return False"
"    vowels = ""aeiouAEIOU""
    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])
    message = message.swapcase()
    return ''.join([vowels_replace[i] if i in vowels else i for i in message])
","def encode(message):
    encoded_message = """"
    vowels = ""aeiouAEIOU""
    for char in message:
        if char.isalpha():
            if char.lower() in vowels:
                if char.islower():
                    encoded_message += chr((ord(char) + 2 - ord('a')) % 26 + ord('a')).swapcase()
                else:
                    encoded_message += chr((ord(char) + 2 - ord('A')) % 26 + ord('A')).swapcase()
            else:
                encoded_message += char.swapcase()
        else:
            encoded_message += char
    return encoded_message"
"    def isPrime(n):
        for i in range(2,int(n**0.5)+1):
            if n%i==0:
                return False

        return True
    maxx = 0
    i = 0
    while i < len(lst):
        if(lst[i] > maxx and isPrime(lst[i])):
            maxx = lst[i]
        i+=1
    result = sum(int(digit) for digit in str(maxx))
    return result

","def skjkasdkd(lst):
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(n ** 0.5) + 1):
            if n % i == 0:
                return False
        return True

    def sum_of_digits(num):
        return sum(int(digit) for digit in str(num))

    primes = [num for num in lst if is_prime(num)]
    if not primes:
        return 0
    max_prime = max(primes)
    return sum_of_digits(max_prime)"
"    if len(dict.keys()) == 0:
        return False
    else:
        state = ""start""
        for key in dict.keys():

            if isinstance(key, str) == False:
                state = ""mixed""
                break
            if state == ""start"":
                if key.isupper():
                    state = ""upper""
                elif key.islower():
                    state = ""lower""
                else:
                    break
            elif (state == ""upper"" and not key.isupper()) or (state == ""lower"" and not key.islower()):
                    state = ""mixed""
                    break
            else:
                break
        return state == ""upper"" or state == ""lower"" 
","def check_dict_case(dict):
    if len(dict) == 0:
        return False
    keys = list(dict.keys())
    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):
        return True
    return False"
"    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes

","def count_up_to(n):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    primes = [x for x in range(2, n) if is_prime(x)]
    return primes

# Test cases
print(count_up_to(5))
print(count_up_to(11))
print(count_up_to(0))
print(count_up_to(20))
print(count_up_to(1))
print(count_up_to(18))"
"    return abs(a % 10) * abs(b % 10)
","def multiply(a, b):
    return int(str(abs(a))[-1]) * int(str(abs(b))[-1])"
"    count = 0
    for i in range(0,len(s),2):
        if s[i] in ""AEIOU"":
            count += 1
    return count
","def count_upper(s):
    count = 0
    vowels = 'AEIOU'
    for i in range(0, len(s), 2):
        if s[i] in vowels:
            count += 1
    return count"
"    from math import floor, ceil

    if value.count('.') == 1:
        # remove trailing zeros
        while (value[-1] == '0'):
            value = value[:-1]

    num = float(value)
    if value[-2:] == '.5':
        if num > 0:
            res = ceil(num)
        else:
            res = floor(num)
    elif len(value) > 0:
        res = int(round(num))
    else:
        res = 0

    return res

","def closest_integer(value):
    value = float(value)
    if value - int(value) >= 0.5:
        return int(value) + 1 if value >= 0 else int(value) - 1
    else:
        return int(value)"
"    return [n + 2*i for i in range(n)]
","def make_a_pile(n):
    stones = []
    stones.append(n)
    for i in range(1, n):
        if n % 2 == 0:
            n += 1
        else:
            n += 2
        stones.append(n)
    return stones"
"    if not s:
        return []

    s_list = []

    for letter in s:
        if letter == ',':
            s_list.append(' ')
        else:
            s_list.append(letter)

    s_list = """".join(s_list)
    return s_list.split()
","def words_string(s):
    return re.findall(r'\w+', s)"
"    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
","def choose_num(x, y):
    max_even = -1
    for num in range(x, y+1):
        if num % 2 == 0 and num > max_even:
            max_even = num
    return max_even"
"    if m < n:
        return -1
    summation = 0
    for i in range(n, m+1):
        summation += i
    return bin(round(summation/(m - n + 1)))
","def rounded_avg(n, m):
    if n > m:
        return -1
    avg = round((n + m) / 2)
    return bin(avg)"
"    odd_digit_elements = []
    for i in x:
        if all (int(c) % 2 == 1 for c in str(i)):
            odd_digit_elements.append(i)
    return sorted(odd_digit_elements)
","def unique_digits(x):
    def has_even_digit(num):
        return any(int(digit) % 2 == 0 for digit in str(num))

    return sorted([num for num in x if not has_even_digit(num)])"
"    dic = {
        1: ""One"",
        2: ""Two"",
        3: ""Three"",
        4: ""Four"",
        5: ""Five"",
        6: ""Six"",
        7: ""Seven"",
        8: ""Eight"",
        9: ""Nine"",
    }
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for var in sorted_arr:
        try:
            new_arr.append(dic[var])
        except:
            pass
    return new_arr
","def by_length(arr):
    mapping = {
        1: 'One',
        2: 'Two',
        3: 'Three',
        4: 'Four',
        5: 'Five',
        6: 'Six',
        7: 'Seven',
        8: 'Eight',
        9: 'Nine'
    }
    
    arr = [x for x in arr if 1 <= x <= 9]
    arr.sort()
    arr.reverse()
    
    return [mapping[x] for x in arr] if arr else []"
"    ret = []
    for i in range(1,n+1):
        if i%2 == 0:
            x = 1
            for j in range(1,i+1): x *= j
            ret += [x]
        else:
            x = 0
            for j in range(1,i+1): x += j
            ret += [x]
    return ret
","def f(n):
    def factorial(num):
        result = 1
        for i in range(1, num + 1):
            result *= i
        return result

    def sum_of_numbers(num):
        return sum(range(1, num + 1))

    result = []
    for i in range(1, n + 1):
        if i % 2 == 0:
            result.append(factorial(i))
        else:
            result.append(sum_of_numbers(i))
    return result"
"    def is_palindrome(n):
        return str(n) == str(n)[::-1]

    even_palindrome_count = 0
    odd_palindrome_count = 0

    for i in range(1, n+1):
        if i%2 == 1 and is_palindrome(i):
                odd_palindrome_count += 1
        elif i%2 == 0 and is_palindrome(i):
            even_palindrome_count += 1
    return (even_palindrome_count, odd_palindrome_count)
","def is_palindrome(num):
    return str(num) == str(num)[::-1]

def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    
    for i in range(1, n+1):
        if is_palindrome(i):
            if i % 2 == 0:
                even_count += 1
            else:
                odd_count += 1
    
    return (even_count, odd_count)"
"    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))
","def count_nums(arr):
    def sum_of_digits(num):
        return sum(int(digit) for digit in str(abs(num)))

    count = 0
    for num in arr:
        if sum_of_digits(num) > 0:
            count += 1
    return count

# Test cases
print(count_nums([]) == 0)
print(count_nums([-1, 11, -11]) == 1)
print(count_nums([1, 1, 2]) == 3)"
"    if len(arr)==0:
      return True
    sorted_array=sorted(arr)
    my_arr=[]
    
    min_value=min(arr)
    min_index=arr.index(min_value)
    my_arr=arr[min_index:]+arr[0:min_index]
    for i in range(len(arr)):
      if my_arr[i]!=sorted_array[i]:
        return False
    return True
","def move_one_ball(arr):
    if not arr:
        return True
    
    sorted_arr = sorted(arr)
    n = len(arr)
    
    for i in range(n):
        if arr == sorted_arr:
            return True
        arr = [arr[-1]] + arr[:-1]
    
    return False"
"    odd = 0
    even = 0
    for i in lst1:
        if i%2 == 1:
            odd += 1
    for i in lst2:
        if i%2 == 0:
            even += 1
    if even >= odd:
        return ""YES""
    return ""NO""
            
","def exchange(lst1, lst2):
    if sum(x % 2 != 0 for x in lst1) <= sum(x % 2 != 0 for x in lst2):
        return ""YES""
    else:
        return ""NO"""
"    dict1={}
    list1=test.split("" "")
    t=0

    for i in list1:
        if(list1.count(i)>t) and i!='':
            t=list1.count(i)
    if t>0:
        for i in list1:
            if(list1.count(i)==t):
                
                dict1[i]=t
    return dict1
","def histogram(test):
    test = test.split()
    result = {}
    for letter in test:
        if letter in result:
            result[letter] += 1
        else:
            result[letter] = 1
    max_count = max(result.values())
    return {key: value for key, value in result.items() if value == max_count}"
"    s = ''.join([char for char in s if char not in c])
    return (s,s[::-1] == s)
","def reverse_delete(s, c):
    s = ''.join([char for char in s if char not in c])
    return (s, s == s[::-1])"
"    res = []
    for arr in lst:
        n = sum(int(d)%2==1 for d in arr)
        res.append(""the number of odd elements "" + str(n) + ""n the str""+ str(n) +""ng ""+ str(n) +"" of the ""+ str(n) +""nput."")
    return res
","def odd_count(lst):
    return [(f""the number of odd elements {sum(1 for digit in s if int(digit) % 2 != 0)}n the str{i}ng {i} of the {i}nput."") for i, s in enumerate(lst)]"
"    max_sum = 0
    s = 0
    for num in nums:
        s += -num
        if (s < 0):
            s = 0
        max_sum = max(s, max_sum)
    if max_sum == 0:
        max_sum = max(-i for i in nums)
    min_sum = -max_sum
    return min_sum
","def minSubArraySum(nums):
    min_sum = float('inf')
    current_sum = 0
    for num in nums:
        current_sum = min(num, current_sum + num)
        min_sum = min(min_sum, current_sum)
    return min_sum"
"    return sum([math.ceil(sum(arr)/capacity) for arr in grid])
","def max_fill(grid, capacity):
    import math
    total_water = 0
    for row in grid:
        total_water += sum(row)
        
    return math.ceil(total_water / capacity) * len(grid[0]) - total_water * len(grid)"
"    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))
","def sort_array(arr):
    return sorted(arr, key=lambda x: (bin(x).count(""1""), x))"
"    result = []
    for word in s.split():
        n_consonants = 0
        for i in range(0, len(word)):
            if word[i].lower() not in [""a"",""e"",""i"",""o"",""u""]:
                n_consonants += 1 
        if n_consonants == n:
            result.append(word)
    return result

","def select_words(s, n):
    if not s:
        return []
    
    def count_consonants(word):
        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'
        return sum(1 for letter in word if letter in consonants)
    
    words = s.split()
    result = [word for word in words if count_consonants(word) == n]
    
    return result"
"    if len(word) < 3:
        return """"

    vowels = {""a"", ""e"", ""i"", ""o"", ""u"", ""A"", ""E"", 'O', 'U', 'I'}
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels:
            if (word[i+1] not in vowels) and (word[i-1] not in vowels):
                return word[i]
    return """"
","def get_closest_vowel(word):
    vowels = ""AEIOUaeiou""
    for i in range(len(word)-2, 0, -1):
        if word[i] in vowels and word[i-1] not in vowels and word[i+1] not in vowels:
            return word[i]
    return """""
"    def check(s):
        val = 0
        for i in s:
            if i == '(':
                val = val + 1
            else:
                val = val - 1
            if val < 0:
                return False
        return True if val == 0 else False

    S1 = lst[0] + lst[1]
    S2 = lst[1] + lst[0]
    return 'Yes' if check(S1) or check(S2) else 'No'
","def match_parens(lst):
    open_count = 0
    close_count = 0
    
    for s in lst:
        for char in s:
            if char == '(':
                open_count += 1
            else:
                close_count += 1
    
    if open_count == close_count:
        return 'Yes'
    else:
        return 'No'"
"    if k == 0:
        return []
    arr.sort()
    ans = arr[-k:]
    return ans
","def maximum(arr, k):
    arr.sort()
    return arr[-k:] if k > 0 else []"
"    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])
","def solution(lst):
    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)"
"    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)
","def add_elements(arr, k):
    return sum([x for x in arr[:k] if 10 <= abs(x) <= 99])"
"    if n%2==0:
        odd_collatz = [] 
    else:
        odd_collatz = [n]
    while n > 1:
        if n % 2 == 0:
            n = n/2
        else:
            n = n*3 + 1
            
        if n%2 == 1:
            odd_collatz.append(int(n))

    return sorted(odd_collatz)
","def get_odd_collatz(n):
    collatz_seq = [n]
    while n != 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3 * n + 1
        collatz_seq.append(n)
    return sorted(list(set([num for num in collatz_seq if num % 2 != 0])))"
"    try:
        date = date.strip()
        month, day, year = date.split('-')
        month, day, year = int(month), int(day), int(year)
        if month < 1 or month > 12:
            return False
        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:
            return False
        if month in [4,6,9,11] and day < 1 or day > 30:
            return False
        if month == 2 and day < 1 or day > 29:
            return False
    except:
        return False

    return True
","def valid_date(date):
    if len(date) != 10:
        return False
    
    if date[2] != '-' or date[5] != '-':
        return False
    
    month = int(date[:2])
    day = int(date[3:5])
    year = int(date[6:])
    
    if month < 1 or month > 12:
        return False
    
    if month in [1, 3, 5, 7, 8, 10, 12]:
        if day < 1 or day > 31:
            return False
    elif month in [4, 6, 9, 11]:
        if day < 1 or day > 30:
            return False
    elif month == 2:
        if day < 1 or day > 29:
            return False
    
    return True"
"    if "" "" in txt:
        return txt.split()
    elif "","" in txt:
        return txt.replace(',',' ').split()
    else:
        return len([i for i in txt if i.islower() and ord(i)%2 == 0])
","def split_words(txt):
    if ' ' in txt:
        return txt.split()
    elif ',' in txt:
        return txt.split(',')
    else:
        return [word for word in txt if ord(word) % 2 != 0]"
"    count_digit = dict([(i, 0) for i in lst])
    for i in lst:
        count_digit[i]+=1 
    if any(count_digit[i] > 2 for i in lst):
        return False
    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):
        return True
    else:
        return False
    
    
","def is_sorted(lst):
    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1)) and all(lst.count(num) <= 1 for num in lst)"
"    def is_prime(num):
        if num == 1 or num == 0:
            return False
        if num == 2:
            return True
        for i in range(2, num):
            if num%i == 0:
                return False
        return True

    l = max(interval1[0], interval2[0])
    r = min(interval1[1], interval2[1])
    length = r - l
    if length > 0 and is_prime(length):
        return ""YES""
    return ""NO""
","def intersection(interval1, interval2):
    start1, end1 = interval1
    start2, end2 = interval2
    intersection_start = max(start1, start2)
    intersection_end = min(end1, end2)
    
    if intersection_end < intersection_start:
        return ""NO""
    
    length = intersection_end - intersection_start + 1
    if length <= 1:
        return ""NO""
    
    for i in range(2, int(length ** 0.5) + 1):
        if length % i == 0:
            return ""NO""
    
    return ""YES"""
"    if not arr: return None
    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))
    return prod * sum([abs(i) for i in arr])
","def prod_signs(arr):
    if not arr:
        return None
    product = 1
    sum_magnitudes = 0
    for num in arr:
        product *= 1 if num >= 0 else -1
        sum_magnitudes += abs(num)
    return product * sum_magnitudes"
"    n = len(grid)
    val = n * n + 1
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                temp = []
                if i != 0:
                    temp.append(grid[i - 1][j])

                if j != 0:
                    temp.append(grid[i][j - 1])

                if i != n - 1:
                    temp.append(grid[i + 1][j])

                if j != n - 1:
                    temp.append(grid[i][j + 1])

                val = min(temp)

    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(val)
    return ans
","def minPath(grid, k):
    def dfs(i, j, path):
        if len(path) == k:
            return path
        neighbors = [(i+1, j), (i-1, j), (i, j+1), (i, j-1)]
        next_paths = []
        for ni, nj in neighbors:
            if 0 <= ni < len(grid) and 0 <= nj < len(grid[0]) and (ni, nj) not in path:
                next_paths.append((ni, nj))
        next_paths.sort(key=lambda x: grid[x[0]][x[1]])
        for ni, nj in next_paths:
            new_path = dfs(ni, nj, path + [(ni, nj)])
            if new_path:
                return new_path
        return None
    
    start = min((grid[i][j], i, j) for i in range(len(grid)) for j in range(len(grid[0])))[1:]
    return [grid[start[0]][start[1]]] + [grid[i][j] for i, j in dfs(start[0], start[1], [start])]"
"    if n == 0:
        return [1]
    my_tri = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            my_tri.append(i / 2 + 1)
        else:
            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)
    return my_tri
","def tri(n):
    if n == 0:
        return [0]
    elif n == 1:
        return [1, 3]
    else:
        tribonacci = [1, 3]
        for i in range(2, n + 1):
            if i % 2 == 0:
                tribonacci.append(1 + i // 2)
            else:
                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])
        return tribonacci

# Example Usage
print(tri(3))"
"    product = 1
    odd_count = 0
    for digit in str(n):
        int_digit = int(digit)
        if int_digit%2 == 1:
            product= product*int_digit
            odd_count+=1
    if odd_count ==0:
        return 0
    else:
        return product
","def digits(n):
    product = 1
    while n > 0:
        digit = n % 10
        if digit % 2 != 0:
            product *= digit
        n //= 10
    if product == 1:
        return 0
    return product"
"    opening_bracket_index = []
    closing_bracket_index = []
    for i in range(len(string)):
        if string[i] == '[':
            opening_bracket_index.append(i)
        else:
            closing_bracket_index.append(i)
    closing_bracket_index.reverse()
    cnt = 0
    i = 0
    l = len(closing_bracket_index)
    for idx in opening_bracket_index:
        if i < l and idx < closing_bracket_index[i]:
            cnt += 1
            i += 1
    return cnt >= 2

    
","def is_nested(string):
    stack = []
    for char in string:
        if char == '[':
            stack.append(char)
        elif char == ']' and stack:
            stack.pop()
    return len(stack) < 2"
"    import math
    squared = 0
    for i in lst:
        squared += math.ceil(i)**2
    return squared
","def sum_squares(lst):
    return sum([(int(num) + (1 if num % 1 != 0 else 0)) ** 2 for num in lst])"
" 
    check = txt.split(' ')[-1]
    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False
","def check_if_last_char_is_a_letter(txt):
    if txt == """":
        return False
    else:
        last_char = txt[-1]
        if last_char.isalpha() and last_char != "" "":
            return True
        else:
            return False"
"    ind=-1
    i=1
    while i<len(arr):
      if arr[i]<arr[i-1]:
        ind=i
      i+=1
    return ind
","def can_arrange(arr):
    for i in range(len(arr)-1, 0, -1):
        if arr[i] < arr[i-1]:
            return i
    return -1"
"    smallest = list(filter(lambda x: x < 0, lst))
    largest = list(filter(lambda x: x > 0, lst))
    return (max(smallest) if smallest else None, min(largest) if largest else None)
","def largest_smallest_integers(lst):
    neg_integers = [i for i in lst if i < 0]
    pos_integers = [i for i in lst if i > 0]
    
    if len(neg_integers) == 0:
        largest_neg = None
    else:
        largest_neg = max(neg_integers)
        
    if len(pos_integers) == 0:
        smallest_pos = None
    else:
        smallest_pos = min(pos_integers)
        
    return (largest_neg, smallest_pos)"
"    temp_a, temp_b = a, b
    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')
    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')
    if float(temp_a) == float(temp_b): return None
    return a if float(temp_a) > float(temp_b) else b 
","def compare_one(a, b):
    if type(a) == type(b):
        if a == b:
            return None
        elif a > b:
            return a
        else:
            return b
    elif type(a) == int and type(b) == float:
        return b
    elif type(a) == float and type(b) == int:
        return a
    elif type(a) == str and type(b) == int:
        return b
    elif type(a) == int and type(b) == str:
        return a
    elif type(a) == str and type(b) == float:
        return b
    elif type(a) == float and type(b) == str:
        return a"
"    return n%2 == 0 and n >= 8
","def is_equal_to_sum_even(n):
    if n % 2 != 0:
        return False
    for i in range(1, n//2 + 1):
        for j in range(i, n//2 + 1):
            for k in range(j, n//2 + 1):
                if i + j + k + k == n and i % 2 == 0 and j % 2 == 0 and k % 2 == 0:
                    return True
    return False"
"    fact_i = 1
    special_fact = 1
    for i in range(1, n+1):
        fact_i *= i
        special_fact *= fact_i
    return special_fact
","def special_factorial(n):
    if n == 1:
        return 1
    else:
        result = 1
        for i in range(1, n+1):
            temp = 1
            for j in range(1, i+1):
                temp *= j
            result *= temp
        return result"
"    new_text = """"
    i = 0
    start, end = 0, 0
    while i < len(text):
        if text[i] == "" "":
            end += 1
        else:
            if end - start > 2:
                new_text += ""-""+text[i]
            elif end - start > 0:
                new_text += ""_""*(end - start)+text[i]
            else:
                new_text += text[i]
            start, end = i+1, i+1
        i+=1
    if end - start > 2:
        new_text += ""-""
    elif end - start > 0:
        new_text += ""_""
    return new_text
","def fix_spaces(text):
    new_text = """"
    count = 0
    for char in text:
        if char == "" "":
            count += 1
            if count > 2:
                new_text += ""-""
            else:
                new_text += ""_""
        else:
            new_text += char
            count = 0
    return new_text"
"    suf = ['txt', 'exe', 'dll']
    lst = file_name.split(sep='.')
    if len(lst) != 2:
        return 'No'
    if not lst[1] in suf:
        return 'No'
    if len(lst[0]) == 0:
        return 'No'
    if not lst[0][0].isalpha():
        return 'No'
    t = len([x for x in lst[0] if x.isdigit()])
    if t > 3:
        return 'No'
    return 'Yes'
","def file_name_check(file_name):
    import re
    pattern = ""^[a-zA-Z][a-zA-Z0-9]*\.(txt|exe|dll)$""
    if re.match(pattern, file_name) and file_name.count(""."") == 1 and file_name.count(""1"") + file_name.count(""2"") + file_name.count(""3"") <= 3:
        return 'Yes'
    else:
        return 'No'"
"    result =[]
    for i in range(len(lst)):
        if i %3 == 0:
            result.append(lst[i]**2)
        elif i % 4 == 0 and i%3 != 0:
            result.append(lst[i]**3)
        else:
            result.append(lst[i])
    return sum(result)
","def sum_squares(lst):
    total = 0
    for i in range(len(lst)):
        if i % 3 == 0:
            total += lst[i] ** 2
        elif i % 4 == 0:
            total += lst[i] ** 3
    return total"
"    new_lst = []
    for word in sentence.split():
        flg = 0
        if len(word) == 1:
            flg = 1
        for i in range(2, len(word)):
            if len(word)%i == 0:
                flg = 1
        if flg == 0 or len(word) == 2:
            new_lst.append(word)
    return "" "".join(new_lst)
","def words_in_sentence(sentence):
    
    def is_prime(n):
        if n <= 1:
            return False
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return False
        return True
    
    def word_length_is_prime(word):
        return is_prime(len(word))
    
    words = sentence.split()
    prime_words = [word for word in words if word_length_is_prime(len(word))]
    
    return ' '.join(prime_words) if prime_words else ''"
"    a, b = x.split(""/"")
    c, d = n.split(""/"")
    numerator = int(a) * int(c)
    denom = int(b) * int(d)
    if (numerator/denom == int(numerator/denom)):
        return True
    return False
","def simplify(x, n):
    num1, den1 = map(int, x.split('/'))
    num2, den2 = map(int, n.split('/'))
    result = num1 * den2 / den1
    return result.is_integer()"
"    def digits_sum(n):
        neg = 1
        if n < 0: n, neg = -1 * n, -1 
        n = [int(i) for i in str(n)]
        n[0] = n[0] * neg
        return sum(n)
    return sorted(nums, key=digits_sum)
","def order_by_points(nums):
    def digit_sum(num):
        return sum(int(digit) for digit in str(abs(num)))

    return sorted(nums, key=lambda x: (digit_sum(x), nums.index(x))) if nums else []"
"    
    count = 0
    for num in nums:
        if num > 10:
            odd_digits = (1, 3, 5, 7, 9)
            number_as_string = str(num)
            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:
                count += 1
        
    return count 
","def specialFilter(nums):
    def is_odd(n):
        return n % 2 != 0
    
    def first_last_odd(n):
        n = abs(n)
        first_digit = int(str(n)[0])
        last_digit = int(str(n)[-1])
        return is_odd(first_digit) and is_odd(last_digit)
    
    count = 0
    for num in nums:
        if num > 10 and first_last_odd(num):
            count += 1
    
    return count"
"    A = [i*i - i + 1 for i in range(1,n+1)]
    ans = []
    for i in range(n):
        for j in range(i+1,n):
            for k in range(j+1,n):
                if (A[i]+A[j]+A[k])%3 == 0:
                    ans += [(A[i],A[j],A[k])]
    return len(ans)
","def get_max_triples(n):
    count = 0
    a = [i*i - i + 1 for i in range(1, n+1)]
    for i in range(n):
        for j in range(i+1, n):
            for k in range(j+1, n):
                if (a[i] + a[j] + a[k]) % 3 == 0:
                    count += 1
    return count"
"    planet_names = (""Mercury"", ""Venus"", ""Earth"", ""Mars"", ""Jupiter"", ""Saturn"", ""Uranus"", ""Neptune"")
    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:
        return ()
    planet1_index = planet_names.index(planet1)
    planet2_index = planet_names.index(planet2)
    if planet1_index < planet2_index:
        return (planet_names[planet1_index + 1: planet2_index])
    else:
        return (planet_names[planet2_index + 1 : planet1_index])
","def bf(planet1, planet2):
    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']
    
    if planet1 not in planets or planet2 not in planets:
        return ()
    
    start = planets.index(planet1)
    end = planets.index(planet2)
    
    if start > end:
        start, end = end, start
    
    return tuple(planet for planet in planets if start < planets.index(planet) < end)"
"    lst.sort()
    new_lst = []
    for i in lst:
        if len(i)%2 == 0:
            new_lst.append(i)
    return sorted(new_lst, key=len)
","def sorted_list_sum(lst):
    return sorted([word for word in lst if len(word) % 2 == 0], key=lambda x: (len(x), x))"
"    if n == 1:
        return y
    for i in range(2, n):
        if n % i == 0:
            return y
            break
    else:
        return x
","def x_or_y(n, x, y):
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    if is_prime(n):
        return x
    else:
        return y"
"    return sum([i**2 for i in lst if i > 0 and i%2!=0 and ""."" not in str(i)])
","def double_the_difference(lst):
    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int)) * 2 if lst else 0"
"    return [abs(x-y) for x,y in zip(game,guess)]
","def compare(game, guess):
    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]"
"    strong = extensions[0]
    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])
    for s in extensions:
        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])
        if val > my_val:
            strong = s
            my_val = val

    ans = class_name + ""."" + strong
    return ans

","def Strongest_Extension(class_name, extensions):
    def calculate_strength(extension):
        upper_case_count = sum(1 for char in extension if char.isupper())
        lower_case_count = sum(1 for char in extension if char.islower())
        return upper_case_count - lower_case_count

    max_strength = float('-inf')
    strongest_extension = ''

    for extension in extensions:
        strength = calculate_strength(extension)
        if strength > max_strength:
            max_strength = strength
            strongest_extension = extension

    return f'{class_name}.{strongest_extension}'"
"    l = len(b)
    pat = b + b
    for i in range(len(a) - l + 1):
        for j in range(l + 1):
            if a[i:i+l] == pat[j:j+l]:
                return True
    return False
","def cycpattern_check(a, b):
    for i in range(len(b)):
        if b in a:
            return True
        b = b[1:] + b[0]
    return False"
"    even_count = 0
    odd_count = 0
    for i in str(abs(num)):
        if int(i)%2==0:
            even_count +=1
        else:
            odd_count +=1
    return (even_count, odd_count)
","def even_odd_count(num):
    even_count = 0
    odd_count = 0
    num_str = str(abs(num))
    for digit in num_str:
        if int(digit) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return (even_count, odd_count)"
"    num = [1, 4, 5, 9, 10, 40, 50, 90,  
           100, 400, 500, 900, 1000] 
    sym = [""I"", ""IV"", ""V"", ""IX"", ""X"", ""XL"",  
           ""L"", ""XC"", ""C"", ""CD"", ""D"", ""CM"", ""M""] 
    i = 12
    res = ''
    while number: 
        div = number // num[i] 
        number %= num[i] 
        while div: 
            res += sym[i] 
            div -= 1
        i -= 1
    return res.lower()
","def int_to_mini_roman(number):
    if not isinstance(number, int) or number < 1 or number > 1000:
        return ""Invalid input""
    
    val = [
        1000, 900, 500, 400,
        100, 90, 50, 40,
        10, 9, 5, 4,
        1
    ]
    
    syms = [
        ""m"", ""cm"", ""d"", ""cd"",
        ""c"", ""xc"", ""l"", ""xl"",
        ""x"", ""ix"", ""v"", ""iv"",
        ""i""
    ]
    
    roman_num = ''
    i = 0
    while number > 0:
        for _ in range(number // val[i]):
            roman_num += syms[i]
            number -= val[i]
        i += 1
    
    return roman_num.lower()"
"    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b
","def right_angle_triangle(a, b, c):
    sides = [a, b, c]
    sides.sort()
    if sides[0]**2 + sides[1]**2 == sides[2]**2:
        return True
    else:
        return False"
"    return sorted(words, key = lambda x: (-len(set(x)), x))[0]
","def find_max(words):
    max_unique_chars = 0
    max_word = """"

    for word in words:
        unique_chars = len(set(word))
        if unique_chars > max_unique_chars:
            max_unique_chars = unique_chars
            max_word = word
        elif unique_chars == max_unique_chars and word < max_word:
            max_word = word

    return max_word"
"    if(need <= remaining):
        return [ number + need , remaining-need ]
    else:
        return [ number + remaining , 0]
","def eat(number, need, remaining):
    total_eaten = number + need
    if total_eaten <= remaining:
        return [total_eaten, remaining - total_eaten]
    else:
        return [number + remaining, 0]"
"    expression = str(operand[0])
    for oprt, oprn in zip(operator, operand[1:]):
        expression+= oprt + str(oprn)
    return eval(expression)
","def do_algebra(operator, operand):
    expression = str(operand[0])
    for i in range(len(operator)):
        expression += operator[i] + str(operand[i+1])
    return eval(expression)"
"    flg = 0
    idx = 0
    new_str = list(s)
    for i in s:
        if i.isalpha():
            new_str[idx] = i.swapcase()
            flg = 1
        idx += 1
    s = """"
    for i in new_str:
        s += i
    if flg == 0:
        return s[len(s)::-1]
    return s
","def solve(s):
    return ''.join([i.lower() if i.isupper() else i.upper() for i in s]) if any(c.isalpha() for c in s) else s[::-1]"
"    import hashlib
    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None
","import hashlib

def string_to_md5(text):
    if not text:
        return None
    return hashlib.md5(text.encode()).hexdigest()"
"    lower = max(2, min(a, b))
    upper = min(8, max(a, b))

    return [i for i in range(lower, upper+1) if i % 2 == 0]
","def generate_integers(a, b):
    return [i for i in range(a, b+1) if i % 2 == 0] if a < b else [i for i in range(b, a+1) if i % 2 == 0]"
